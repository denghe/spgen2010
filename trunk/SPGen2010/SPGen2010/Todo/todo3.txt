生成界面调整：

对应当前生成项的所有生成结果，纵向铺开　Expander








生成物命名空间样本：



namespace DAL
namespace DAL.Tables
namespace DAL.Views
namespace DAL.UserDefinedFunctions
namespace DAL.UserDefinedTableTypes
namespace DAL.StoredProcedures

DAL. ... .dbo.Xxxxx.MethodName

DAL.Schemas (enum)





存储过程返回值结构规划：

必然返回部分：
	RETURN int

自定义返回值部分：

	1. 简单类型：
		值类型：
			1. 第一行第一列的 object		Scalar
		完全匹配现有结构：
			2. 单行某表					TableRow
			3. 单行某视图				ViewRow
			4. 单行某表类型				TableTypeRow
			5. 多行某表					TableRows
			6. 多行某视图				ViewRows
			7. 多行某表类型				TableTypeRows
		生成器编辑界面创建：
			8. 单行自定义结构			StructRow
			9. 多行自定义结构			StructRows
	2. 复合类型：
		在简单类型的基础上，由多个简单类型拼接而成
	3. 未知类型：
		返回的结果集个数未知，每个集的字段名，字段数。。。通通未知
		暂定处理方案为　DataSet

	特殊优化：
		允许设置为不 RETURN （相当于是无返回值的情况）
		在不 RETURN 的情况下，如果存在自定义返回值部分，则返回值直接为简单类型。（ Direct, Simple, Complete, DataSet 4种模式。见下例 ）



假设有 SP 内容如下　：

	select count(*) from xxx;
	select 20;
	select top(20) * from xxx;
	select top(1) a.id, b.name, c.price from a, b, c ...;
	return 1;

返回值结构定义长像：


<ResultConfig>
	<ResultType Category="2" Mode="Complete" HasReturnValue="True" />
	<ResultSet>
		<Result Index="1" Name="Total" 			Category="Scalar" 		Type="int" 		Description="总行数" />
		<Result Index="2" Name="PageSize" 		Category="Scalar" 		Type="int" 		Description="每页行数" />
		<Result Index="3" Name="Rows" 			Category="TableRows" 	Schema="dbo" 	Name="xxx" 			Description="xxx表当前页的数据" />
		<Result Index="4" Name="ReferenceRows" 	Category="CustomRow" 	Description="附带的相关明细数据" />
	</ResultSet>
	<Struct_ReferenceRows>
		<Column Index="1" Name="ID" 	SqlDataType="int" 		Nullable="True" Description="编号" />
		<Column Index="2" Name="Name" 	SqlDataType="string" 	Nullable="True" MaximumLength="50" 		Description="名称" />
		<Column Index="3" Name="Price" 	SqlDataType="decimal" 	Nullable="True" NumericPrecision="10" 	NumericScale="2" 	Description="价格" />
	</Struct_ReferenceRows>
</ResultConfig>


C# 结构描述相关生成物大至长像：


class SPName
{
    /// <summary>
    /// Execute SPName SP & Return Value.
    /// </summary>
	public Result Execute( ... ) {
		...
	};

	class Result
	{
	    /// <summary>
	    /// Return Value
	    /// </summary>
		public int 			ReturnValue 		{ get; set; }

	    /// <summary>
	    /// Custom Select Statments
	    /// </summary>
		public ResultSet	ResultSet			{ get; set; }

	    /// <summary>
	    /// Print Messages
	    /// </summary>
		public string		PrintMessages		{ get; set; }

	    /// <summary>
	    /// Level: 1 - 10 Raiserrors
	    /// </summary>
		public string		RaiserrorMessages	{ get; set; }
	}
	class ResultSet
	{
	    /// <summary>
	    /// 总行数
	    /// </summary>
		public int						Total 			{ get; set; }

	    /// <summary>
	    /// 每页行数
	    /// </summary>
		public int	 					PageSize 		{ get; set; }

	    /// <summary>
	    /// xxx表当前页的数据
	    /// </summary>
		public Tables.dbo.xxx 			Rows 			{ get; set; }

	    /// <summary>
	    /// 附带的相关明细数据
	    /// </summary>
		public CustomRow_ReferenceRows	ReferenceRows	{ get; set; }
	}
	class CustomRow_ReferenceRows
	{
	    /// <summary>
	    /// 编号
	    /// </summary>
		public int 		ID 		{ get; set; }

	    /// <summary>
	    /// 名称
	    /// </summary>
		public string 	Name 	{ get; set; }

	    /// <summary>
	    /// 价格
	    /// </summary>
		public decimal 	Price 	{ get; set; }
	}
}





假设有 SP 内容如下　：

	select max(CreateTime) from xxx;


<ResultConfig>
	<ResultType Category="1" Mode="Simple" HasReturnValue="False" HasPrintMessages="False" HasRaiserrorMessages="False" />
	<ResultSet>
		<Result Index="3" Name="MaxCreateTime" Category="TableRows" Schema="dbo" Name="xxx" Description="最大创建时间" />
	</ResultSet>
</ResultConfig>


class SPName
{
    /// <summary>
    /// Execute SPName SP & Return Value.
    /// </summary>
	public Result Execute( ... ) {
		...
	};

	class Result				// 简单模式的生成：可理解为用 ResultSet 直接替代了 Result 类  且不生成 False 的几个属性
	{
	    /// <summary>
	    /// 最大创建时间
	    /// </summary>
		public DateTime MaxCreateTime { get; set; }
	}
}



<ResultConfig>
	<ResultType Category="1" Mode="Direct" />
	<ResultSet>
		<Result Index="3" Name="MaxCreateTime" Category="TableRows" Schema="dbo" Name="xxx" Description="返回最大创建时间" />
	</ResultSet>
</ResultConfig>


class SPName
{
    /// <summary>
	/// 返回最大创建时间
	/// </summary>
	public DateTime Execute( ... ) {
		...
	};				// 直接模式的生成：无视返回值命名，直接指定类型。
}





<ResultConfig>
	<ResultType Mode="DataSet" HasReturnValue="False" HasPrintMessages="True" HasRaiserrorMessages="False" />
</ResultConfig>


class SPName
{
    /// <summary>
    /// Execute SPName SP & Return Value.
    /// </summary>
	public Result Execute( ... ) {
		...
	};

	class Result
	{
	    /// <summary>
	    /// Custom Select Statments
	    /// </summary>
		public DataSet		ResultSet			{ get; set; }

	    /// <summary>
	    /// Print Messages
	    /// </summary>
		public string		PrintMessages		{ get; set; }
	}
}








完全未知返回值解决方案：

class Set
{
	public List<Table> Tables;
	public Table this ( int index );
	public Table this ( string name );
}
class Table
{
	public int Index;
	public string Name;
	public List<Column> Columns;
	public List<Row> Rows;
	public Row this ( int rowIdx );
}
class Column
{
	public int Index;
	// 类型　精度 ... 
}
class Row
{
	private List<Object[]> data;
	public Object this ( int idx )
	public Object this ( Column col )
	public object this ( string name )
}



部分结果未知返回值解决方案：

	结合已知结构外加上面 Table 这一级的数据结构来存储。










sp: xxx
select count(*) from xxx;
select top(100) * from xxx;


var set = xxx.Execute();

var count = (int)set[0][0][0];
var table = set[1];
foreach(var row in table.Rows)


var ds = cmd.ExecuteDataSet("exec xxx");

int
int? i = null;













一些琐碎示例


using SP = DAL.StoredProcedures.dbo;
...
var rows = SP.usp_表_select(....);
foreach(var row in rows) ...

bool b = SP.usp_Users_Exists(username, password);











某 SP 部分内容：


PRINT @Username
PRINT @Password

SELECT IsEnabled 
  FROM dbo.Users 
 WHERE Username = @Username 
   AND Password = @Password

RETURN 0;

调用代码：

var p = new SP.usp_Users_Exists.Parameters {
   Username = "xxx"
 , Password = "123456"
};
var r = SP.usp_Users_Exists( p );

// r.ReturnValue = 0
// r.Result = true
// r.PrintMessage = "xxx   123456"



