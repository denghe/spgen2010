生成界面调整：

对应当前生成项的所有生成结果，纵向铺开　Expander



存储过程执行结果结构规划：

必然返回部分：
	RETURN int

自定义返回值部分：

	1. 简单类型：
		值类型：
			1. 第一行第一列的 object		Scalar
		完全匹配现有结构：
			2. 单行某表					TableRow
			3. 单行某视图				ViewRow
			4. 单行某表类型				TableTypeRow
			5. 多行某表					TableRows
			6. 多行某视图				ViewRows
			7. 多行某表类型				TableTypeRows
		生成器编辑界面创建：
			8. 单行自定义结构			CustomRow
			9. 多行自定义结构			CustomRows
	2. 复合类型：
		在简单类型的基础上，由多个简单类型拼接而成
	3. 一知半解类型：
		基于复合类型，只是其中部分结构的字段名或个数，返回行数未知	DbTable 穿插
	4. 未知类型：
		返回的结果集个数未知，每个集的字段名，字段数。。。通通未知	DbSet
		

返回值关注（生成）选项（名称，默认值，说明）：

	HasReturnValue			= True			是否含有 RETURN int 语句
	HasPrintMessages		= False			是否含有 PRINT 语句
	HasRaiserrorMessages	= False			是否含有 RAISERROR 语句或 错误输出
	HasResultSet			= True			是否含有 SELECT 语句若干

注：生成时这些选项直接影响生成的调用结果承载代码 是否含有某种属性。

生成物特殊优化：

当符合下列 *所有* 条件时，执行 直接返回 结构实例：
	HasReturnValue			= False
	HasPrintMessages		= False
	HasRaiserrorMessages	= False
	HasResultSet			= True

当符合下列 *所有* 条件时，执行 直接返回 ReturnValue：
	HasReturnValue			= True
	HasPrintMessages		= False
	HasRaiserrorMessages	= False
	HasResultSet			= False

....

即：当只包含单项返回内容时，该内容于执行调用后直接返回



假设有 SP 内容如下　：

select count(*) from xxx;
select 20;
select top(20) * from xxx;
select top(1) a.id, b.name, c.price from a, b, c ...;
return 1;

返回值结构描述：

<Result>
	<Option HasReturnValue="True" HasPrintMessages="False" HasRaiserrorMessages="False" HasResultSet="True" />
	<Sets>
		<Result Index="1" Name="Total" 			Category="Scalar" 		Type="int" 		Description="总行数" />
		<Result Index="2" Name="PageSize" 		Category="Scalar" 		Type="int" 		Description="每页行数" />
		<Result Index="3" Name="Rows" 			Category="TableRows" 	Schema="dbo" 	Name="xxx" 			Description="xxx表当前页的数据" />
		<Result Index="4" Name="ReferencedData"	Category="CustomRow" 	Description="附带的相关明细数据" />
	</Sets>
	<CustomRow Name="ReferencedData">
		<Column Index="1" Name="ID" 	SqlDataType="int" 		Nullable="True" Description="编号" />
		<Column Index="2" Name="Name" 	SqlDataType="string" 	Nullable="True" MaximumLength="50" 		Description="名称" />
		<Column Index="3" Name="Price" 	SqlDataType="decimal" 	Nullable="True" NumericPrecision="10" 	NumericScale="2" 	Description="价格" />
	</CustomRow>
</Result>


C# 结构描述相关生成物大至长像：


class SPName
{
    /// <summary>
    /// Execute SPName SP & Return Value.
    /// </summary>
	public Result Execute( ... ) {
		...
	};

	class Result
	{
	    /// <summary>
	    /// Return Value
	    /// </summary>
		public int 			ReturnValue 		{ get; set; }

	    /// <summary>
	    /// Custom Select Statments
	    /// </summary>
		public ResultSet	ResultSet			{ get; set; }
/*
	    /// <summary>
	    /// Print Messages
	    /// </summary>
		public string		PrintMessages		{ get; set; }
*/
/*
	    /// <summary>
	    /// Level: 1 - 10 Raiserrors
	    /// </summary>
		public string		RaiserrorMessages	{ get; set; }
*/
	}
	class ResultSet
	{
	    /// <summary>
	    /// 总行数
	    /// </summary>
		public int								Total 			{ get; set; }

	    /// <summary>
	    /// 每页行数
	    /// </summary>
		public int	 							PageSize 		{ get; set; }

	    /// <summary>
	    /// xxx表当前页的数据
	    /// </summary>
		public List<Tables.dbo.xxx> 			Rows 			{ get; set; }

	    /// <summary>
	    /// 附带的相关明细数据
	    /// </summary>
		public Custom_ReferencedData			ReferencedData	{ get; set; }
	}
	class Custom_ReferencedData
	{
	    /// <summary>
	    /// 编号
	    /// </summary>
		public int 		ID 		{ get; set; }

	    /// <summary>
	    /// 名称
	    /// </summary>
		public string 	Name 	{ get; set; }

	    /// <summary>
	    /// 价格
	    /// </summary>
		public decimal 	Price 	{ get; set; }
	}
}





假设有 SP 内容如下　：

	select max(CreateTime) from xxx;


<ResultConfig>
	<ResultOption HasReturnValue="False" />
	<ResultSet>
		<Result Index="3" Name="MaxCreateTime" Category="TableRows" Schema="dbo" Name="xxx" Description="最大创建时间" />
	</ResultSet>
</ResultConfig>


class SPName
{
    /// <summary>
    /// Execute SPName SP & Return Value.
    /// </summary>
	public Result Execute( ... ) {
		...
	};

	class Result				// 简单模式的生成：可理解为用 ResultSet 直接替代了 Result 类  且不生成 False 的几个属性
	{
	    /// <summary>
	    /// 最大创建时间
	    /// </summary>
		public DateTime MaxCreateTime { get; set; }
	}
}















sp: xxx
select count(*) from xxx;
select top(100) * from xxx;


var set = xxx.Execute();

var count = (int)set[0][0][0];
var table = set[1];
foreach(var row in table.Rows)


var ds = cmd.ExecuteDataSet("exec xxx");

int
int? i = null;













一些琐碎示例


using SP = DAL.StoredProcedures.dbo;
...
var rows = SP.usp_表_select(....);
foreach(var row in rows) ...

bool b = SP.usp_Users_Exists(username, password);











某 SP 部分内容：


PRINT @Username
PRINT @Password

SELECT IsEnabled 
  FROM dbo.Users 
 WHERE Username = @Username 
   AND Password = @Password

RETURN 0;

调用代码：

var p = new SP.usp_Users_Exists.Parameters {
   Username = "xxx"
 , Password = "123456"
};
var r = SP.usp_Users_Exists( p );

// r.ReturnValue = 0
// r.Result = true
// r.PrintMessage = "xxx   123456"



